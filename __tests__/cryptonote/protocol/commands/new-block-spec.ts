import * as assert from 'assert';
import * as path from 'path';
import { Configuration } from '../../../../src/config/types';
import { BufferStreamReader } from '../../../../src/cryptonote/serialize/reader';
import { getBlockChain } from '../../../../src/init/blockchain';
import { getBlockFile } from '../../../../src/util/fs';

import { p2p } from '../../../../src/config/consts';
import { BlockChain } from '../../../../src/cryptonote/block/blockchain';
import { INetwork, IPeer } from '../../../../src/cryptonote/p2p';
import { NSNewBlock } from '../../../../src/cryptonote/protocol/commands/new-block';
import { getMemoryPool } from '../../../../src/init/mem-pool';
import { data as mainnet } from '../../../../src/init/net-types/mainnet';
import {
  ConnectionState,
  P2pConnectionContext,
} from '../../../../src/p2p/connection';
import { Handler } from '../../../../src/p2p/protocol/handler';
import { IP } from '../../../../src/util/ip';

const network: INetwork = {
  conectionTimeout: p2p.P2P_DEFAULT_CONNECTION_TIMEOUT,
  connectionsCount: p2p.P2P_DEFAULT_CONNECTIONS_COUNT,
  handshakeInterval: p2p.P2P_DEFAULT_HANDSHAKE_INTERVAL,
  id: 0, // deprecated config id, should be removed in production
  packageMaxSize: p2p.P2P_DEFAULT_PACKET_MAX_SIZE,
  pingConnectionTimeout: p2p.P2P_DEFAULT_PING_CONNECTION_TIMEOUT,
  sendPeerListSize: p2p.P2P_DEFAULT_PEERS_IN_HANDSHAKE,
};

const dir = path.resolve(__dirname, '../../../vigcoin');
const config: Configuration.ICurrency = {
  block: {
    genesisCoinbaseTxHex: '111',
    version: {
      major: 1,
      minor: 1,
      patch: 1,
    },
  },
  blockFiles: getBlockFile(dir, mainnet),
  hardfork: [],
};
const bc: BlockChain = getBlockChain(config);
bc.init();

const memPool = getMemoryPool(dir, mainnet);

const handler = new Handler(bc, memPool);

describe('serialize new block', () => {
  it('should read new block', async () => {
    const host = '69.171.73.252';
    const port = 19800;

    const peer: IPeer = {
      port,
      // tslint:disable-next-line:object-literal-sort-keys
      ip: IP.toNumber(host),
    };
    const socket = await P2pConnectionContext.createConnection(peer, network);

    const context = new P2pConnectionContext(socket);
    const buffer = Buffer.from([
      0x01,
      0x11,
      0x01,
      0x01,
      0x01,
      0x01,
      0x02,
      0x01,
      0x01,
      0x0c,
      0x01,
      0x62,
      0x0c,
      0x04,
      0x05,
      0x62,
      0x6c,
      0x6f,
      0x63,
      0x6b,
      0x0a,
      0x11,
      0x06,
      0x07,
      0x00,
      0x88,
      0xa0,
      0xa8,
      0xeb,
      0x05,
      0xbb,
      0xd7,
      0x27,
      0x18,
      0x7a,
      0x72,
      0x97,
      0xa1,
      0xad,
      0x00,
      0xf9,
      0xaa,
      0x46,
      0xd7,
      0x44,
      0x73,
      0x86,
      0x89,
      0x45,
      0x26,
      0xb2,
      0x8a,
      0xf4,
      0x63,
      0x0a,
      0x47,
      0xf5,
      0x4b,
      0xf9,
      0x29,
      0x1d,
      0x98,
      0xa2,
      0x6e,
      0xa5,
      0x08,
      0x01,
      0xc5,
      0x99,
      0x15,
      0x01,
      0xff,
      0x89,
      0x99,
      0x15,
      0x08,
      0x31,
      0x02,
      0x5c,
      0x35,
      0x2e,
      0xff,
      0x41,
      0x93,
      0x63,
      0xbd,
      0x3c,
      0x44,
      0x96,
      0xac,
      0x7b,
      0xe4,
      0xb7,
      0x70,
      0x4f,
      0x94,
      0x88,
      0x26,
      0xbd,
      0xde,
      0x40,
      0x62,
      0xe4,
      0x94,
      0xd7,
      0x28,
      0x76,
      0xa9,
      0xd2,
      0x8c,
      0xc0,
      0x3e,
      0x02,
      0x28,
      0x75,
      0xcd,
      0xf1,
      0x4f,
      0x9c,
      0x4d,
      0x36,
      0xea,
      0xdd,
      0x03,
      0x0a,
      0x9a,
      0x88,
      0x91,
      0x5b,
      0xf5,
      0x9c,
      0xf2,
      0xaf,
      0x1c,
      0x2a,
      0x50,
      0x0d,
      0xbd,
      0xd9,
      0x22,
      0x81,
      0x53,
      0x16,
      0x15,
      0x24,
      0x90,
      0xbf,
      0x05,
      0x02,
      0xf9,
      0x2b,
      0x73,
      0xe3,
      0xcf,
      0x0c,
      0x52,
      0x93,
      0xb8,
      0xb5,
      0xaa,
      0x8f,
      0x66,
      0x9d,
      0x6d,
      0x25,
      0x90,
      0xb8,
      0x36,
      0xdc,
      0x94,
      0xa3,
      0x6d,
      0xb7,
      0x44,
      0xf7,
      0x7f,
      0x79,
      0xfb,
      0xf8,
      0x28,
      0x34,
      0xa0,
      0xc2,
      0x1e,
      0x02,
      0xab,
      0x0a,
      0x5c,
      0x5d,
      0xe2,
      0x68,
      0xae,
      0xd2,
      0x26,
      0x3e,
      0xae,
      0x08,
      0x7a,
      0x47,
      0x50,
      0xea,
      0x93,
      0xc1,
      0x9d,
      0xc5,
      0x69,
      0x16,
      0x30,
      0x57,
      0xf0,
      0x12,
      0xf9,
      0x8f,
      0x71,
      0x7c,
      0xcd,
      0xa1,
      0x80,
      0xa4,
      0xe8,
      0x03,
      0x02,
      0x02,
      0xde,
      0xbc,
      0x2e,
      0x1d,
      0xc8,
      0x38,
      0x41,
      0x53,
      0xf8,
      0x34,
      0x07,
      0x9f,
      0x97,
      0x26,
      0xf1,
      0xe1,
      0xe9,
      0xd8,
      0x70,
      0xb6,
      0x66,
      0x9b,
      0x05,
      0xc0,
      0x54,
      0x68,
      0x75,
      0x1f,
      0x60,
      0x37,
      0x71,
      0x80,
      0x8e,
      0xce,
      0x1c,
      0x02,
      0xeb,
      0x14,
      0x21,
      0x5d,
      0x86,
      0xbb,
      0x84,
      0xf2,
      0x18,
      0x3c,
      0x14,
      0xf5,
      0x04,
      0x80,
      0x84,
      0x5e,
      0xae,
      0xfa,
      0xd3,
      0x34,
      0xef,
      0x4a,
      0x29,
      0x10,
      0x12,
      0x6f,
      0x01,
      0x9e,
      0x32,
      0xa5,
      0x00,
      0x7f,
      0x80,
      0x84,
      0xaf,
      0x5f,
      0x02,
      0xab,
      0xce,
      0x6b,
      0x59,
      0x05,
      0x64,
      0xe4,
      0x5f,
      0xa7,
      0x09,
      0x3e,
      0x6a,
      0x75,
      0x51,
      0xd5,
      0xad,
      0x2c,
      0xbc,
      0x18,
      0x77,
      0xe6,
      0xd8,
      0x07,
      0x99,
      0x83,
      0x98,
      0x73,
      0xf6,
      0x0a,
      0x2b,
      0x43,
      0x10,
      0x80,
      0xa0,
      0xd9,
      0xe6,
      0x1d,
      0x02,
      0x73,
      0xf1,
      0x72,
      0x11,
      0xb6,
      0x2d,
      0x05,
      0x52,
      0xb6,
      0xd3,
      0x1d,
      0x26,
      0x97,
      0x66,
      0xcd,
      0x77,
      0xe8,
      0xac,
      0x1c,
      0xb5,
      0x46,
      0x56,
      0xc3,
      0x7f,
      0xb9,
      0x8e,
      0xe2,
      0x3f,
      0x1a,
      0x2a,
      0xee,
      0x80,
      0x2b,
      0x01,
      0x61,
      0xb5,
      0xe9,
      0x8e,
      0xca,
      0x15,
      0x61,
      0x46,
      0x8c,
      0xa4,
      0x6b,
      0xe6,
      0xbb,
      0x17,
      0xff,
      0xfd,
      0xa4,
      0x65,
      0x85,
      0x76,
      0x42,
      0x2c,
      0x6f,
      0x2c,
      0xc8,
      0x7d,
      0xbf,
      0x41,
      0xe8,
      0xd1,
      0xe5,
      0x5a,
      0x02,
      0x08,
      0x00,
      0x00,
      0x00,
      0x00,
      0x01,
      0x66,
      0x98,
      0xd3,
      0x00,
      0x19,
      0x63,
      0x75,
      0x72,
      0x72,
      0x65,
      0x6e,
      0x74,
      0x5f,
      0x62,
      0x6c,
      0x6f,
      0x63,
      0x6b,
      0x63,
      0x68,
      0x61,
      0x69,
      0x6e,
      0x5f,
      0x68,
      0x65,
      0x69,
      0x67,
      0x68,
      0x74,
      0x06,
      0x8a,
      0x4c,
      0x05,
      0x00,
      0x03,
      0x68,
      0x6f,
      0x70,
      0x06,
      0x01,
      0x00,
      0x00,
      0x00,
    ]);

    const request: NSNewBlock.IRequest = NSNewBlock.Reader.request(
      new BufferStreamReader(buffer)
    );

    assert(request.blockCompleteEntry.txs === undefined);
    assert(request.blockCompleteEntry.block.length === 388);
    assert(request.currentBlockHeight === 347274);
    assert(request.hop === 1);
    assert(!handler.onNewBlock(buffer, context));
    context.state = ConnectionState.NORMAL;
    assert(handler.onNewBlock(buffer, context));
    socket.destroy();
  });
});
